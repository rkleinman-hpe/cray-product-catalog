name: Build Docker Image
on:
  push:
    # Do not build pushes to the main/master branch, tags build prod releases
    # Do not build release branches from historical CSM/Shasta releases
    branches-ignore:
      - main
      - master
      - 'releases/csm-**'
      - 'releases/shasta-**'

    # Build production releases from tags on main/master, see GitFlow
    tags:
      - 'v*'

  pull_request: # opened, syncronize, reopened

# Globals
env:
  IMAGE_NAME: cray-product-catalog-update
  IMAGE_REGISTRY: artifactory.algol60.net
  IMAGE_REGISTRY_DOWNLOAD_PATH: artifactory
  IMAGE_REPOSITORY: csm-docker

# Workflow Jobs
jobs:

  preamble:
    runs-on: self-hosted
    outputs:
      semVer: ${{ steps.gitversion.outputs.semVer }}
      preReleaseTag: ${{ steps.gitversion.outputs.PreReleaseTag }}
      stableRepo: ${{ steps.stable.outputs.stable_repo }}
      buildDateTime: ${{ steps.date.outputs.builddatetime }}

    steps:
      - name: Set the build date/time
        id: date
        run: echo "::set-output name=builddatetime::$(date +'%Y%m%d%H%M%S')"
        shell: bash

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.11
        with:
          versionSpec: '5.8.1'

      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Run GitVersion to compute semantic version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.11

      - name: Set Stable Build
        id: stable
        run: |
          if ${{ steps.gitversion.outputs.preReleaseTag == '' }}; then
            echo ::set-output name=stable_repo::$(echo 'stable')
          else
            echo ::set-output name=stable_repo::$(echo 'unstable')
          fi

  build-docker-image:
    runs-on: ubuntu-latest
    needs: preamble
    outputs:
      fullImageWithShaTag: ${{ steps.buildvars.outputs.full_image_sha_tag }}
      imageDL: ${{ steps.buildvars.outputs.image_dl }}
      shaTag: ${{ steps.buildvars.outputs.sha_tag }}
      imageWithShaTag: ${{ steps.buildvars.outputs.image_sha_tag }}
    env:
      COSIGN_GCP_SA_KEY: ${{ secrets.COSIGN_GCP_SA_KEY }} 
      COSIGN_KEY: ${{ secrets.COSIGN_KEY }}
      SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

    steps:

      - name: Set variables
        id: buildvars
        run: |
          echo ::set-output         name=image_base::$(echo ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_REPOSITORY }}/${{ needs.preamble.outputs.stableRepo }}/${{ env.IMAGE_NAME }})
          echo ::set-output name=full_image_sha_tag::$(echo ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_REPOSITORY }}/${{ needs.preamble.outputs.stableRepo }}/${{ env.IMAGE_NAME }}:sha-$GITHUB_SHA)
          echo ::set-output           name=image_dl::$(echo ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_REGISTRY_DOWNLOAD_PATH }}/${{ env.IMAGE_REPOSITORY }}/${{ needs.preamble.outputs.stableRepo }}/${{ env.IMAGE_NAME }}:sha-$GITHUB_SHA)
          echo ::set-output      name=image_sha_tag::$(echo ${{ env.IMAGE_NAME }}:sha-$GITHUB_SHA)
          echo ::set-output            name=sha_tag::$(echo sha-$GITHUB_SHA)

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to algol60 Container Registry
        uses: docker/login-action@v1
        with:
          registry: artifactory.algol60.net
          username: github-actions-cray-hpe
          password: ${{ secrets.ARTIFACTORY_ALGOL60_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ steps.buildvars.outputs.image_base }}
          tags: |
            type=schedule,enable=false
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}},value=${{ needs.preamble.outputs.semVer }}+${{ needs.preamble.outputs.buildDateTime }}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,format=long

      - name: Build Image
        uses: docker/build-push-action@v2
        id: build
        with:
          push: true
          build-args: |
            VERSION=${{ needs.preamble.outputs.semVer }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  update-pr-with-artifacts:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' }}
    needs:
      - build-docker-image
      - preamble
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Create comment vars
        id: comment-vars
        run: |
          echo ::set-output name=repo_name::$(echo ${GITHUB_ACTOR}_${GITHUB_REPOSITORY}_${GITHUB_REF_NAME} | sed 's|/|_|g')

      - name: Find Comment
        uses: peter-evans/find-comment@v1
        id: fc
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: Here is the image

      - name: Render template
        id: template
        uses: chuhlomin/render-template@v1.2
        with:
          template: .github/build-image-comment-template.md
          vars: |
            fullImageWithShaTag: ${{ needs.build-docker-image.outputs.fullImageWithShaTag }}
            stableRepo: ${{ needs.preamble.outputs.stableRepo }}
            imageName: ${{ env.IMAGE_NAME }}
            imageTag: ${{ needs.build-docker-image.outputs.shaTag }}
            imageDownloadLink: ${{ needs.build-docker-image.outputs.imageDL }}
            imageWithShaTag: ${{ needs.build-docker-image.outputs.imageWithShaTag }}
            zypperRepoName: ${{ steps.comment-vars.outputs.repo_name }}
            PRHeadSha: ${{ github.event.pull_request.head.sha }}

      - name: Create comment
        if: steps.fc.outputs.comment-id == ''
        uses: peter-evans/create-or-update-comment@v1
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: ${{ steps.template.outputs.result }}
          reactions: rocket

      - name: Update comment
        if: steps.fc.outputs.comment-id != ''
        uses: peter-evans/create-or-update-comment@v1
        with:
          comment-id: ${{ steps.fc.outputs.comment-id }}
          body: ${{ steps.template.outputs.result }}
          edit-mode: replace

  docker-image-signing:
    runs-on: ubuntu-latest
    needs: build-docker-image

    steps:
      - name: Install cosign
        uses: sigstore/cosign-installer@main
        with:
          cosign-release: 'v1.0.0'

      - name: Set up Cloud SDK for Signing
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: ${{ secrets.COSIGN_GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.COSIGN_GCP_SA_KEY }}
          export_default_credentials: true

      - name: Login to algol60 Container Registry
        uses: docker/login-action@v1
        with:
          registry: artifactory.algol60.net
          username: github-actions-cray-hpe
          password: ${{ secrets.ARTIFACTORY_ALGOL60_TOKEN }}

      - name: Sign Image
        run: COSIGN_KEY=$COSIGN_GCP_SA_KEY cosign sign -key $COSIGN_KEY -a GIT_HASH=$GITHUB_SHA $FULL_IMAGE_WITH_TAG
        shell: bash
        env:
          COSIGN_GCP_SA_KEY: ${{ secrets.COSIGN_GCP_SA_KEY }} 
          COSIGN_KEY: ${{ secrets.COSIGN_KEY }}
          FULL_IMAGE_WITH_TAG: ${{ needs.build-docker-image.outputs.fullImageWithShaTag }}

  docker-image-vulnerability-scan:
    runs-on: ubuntu-latest
    needs: build-docker-image

    steps:
      - name: Snyk setup
        uses: snyk/actions/setup@master

      - name: Snyk Scan Image
        run: snyk test --docker $FULL_IMAGE_WITH_TAG
        shell: bash
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          FULL_IMAGE_WITH_TAG: ${{ needs.build-docker-image.outputs.fullImageWithShaTag }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: config
          severity: CRITICAL,HIGH
          hide-progress: false
          ignore-unfixed: true
          exit-code: '1'

  build-helm-chart:
    runs-on: ubuntu-latest
    needs: preamble
    env:
      HELM_REPO_BASE: artifactory.algol60.net/csm-helm-charts
      CHART_NAME: cray-product-catalog
    steps:
      - name: Stable or unstable build
        run: |
          if ${{ needs.preamble.outputs.preReleaseTag == '' }}; then
            echo "HELM_REPO=${HELM_REPO_BASE}/stable" >> $GITHUB_ENV
          else
            echo "HELM_REPO=${HELM_REPO_BASE}/unstable" >> $GITHUB_ENV
          fi
      - name: print repo env
        run: |
          echo $HELM_REPO